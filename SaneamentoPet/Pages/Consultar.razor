@* @page "/Consultar"
@using System.Collections.Generic
@using SaneamentoPet.Client.Services
@using static SaneamentoPet.Pages.Cadastro

@inject PetService PetService


<PageTitle>Consulta de Pets</PageTitle>

<h3>Consulta de Pets Cadastrados</h3>

<div class="mb-3">
    <label for="numeroChip">Número do Chip:</label>
    <InputText id="numeroChip" class="form-control" @bind-Value="@numeroChip" />
</div>

<button class="btn btn-primary" @onclick="ConsultarPet">Consultar</button>

@if (petEncontrado != null)
{
    <div class="mt-3">
        <h4>Dados do Pet:</h4>
        <p><strong>Nome:</strong> @petEncontrado.Nome</p>
        <p><strong>Número do Chip:</strong> @petEncontrado.NumeroChip</p>
        <p><strong>Idade Aproximada:</strong> @petEncontrado.IdadeAproximada anos</p>
        <p><strong>Tipo:</strong> @petEncontrado.Tipo</p>
        <p><strong>Castrado:</strong> @(petEncontrado.Castrado ? "Sim" : "Não")</p>
        <p><strong>Vacinado:</strong> @(petEncontrado.Vacinado ? "Sim" : "Não")</p>
        <p><strong>Sexo:</strong> @petEncontrado.Sexo</p>
    </div>
}

@if (mensagemErro != null)
{
    <div class="alert alert-danger mt-3">
        @mensagemErro
    </div>
}

@code {
    private string numeroChip;
    private Pet petEncontrado;
    private string mensagemErro;

    // Simulação de um banco de dados com uma lista em memória
    private List<Pet> petsCadastrados = new List<Pet>
    {
        new Pet { Nome = "Rex", NumeroChip = "123456", IdadeAproximada = 5, Tipo = "Cachorro", Castrado = true, Vacinado = true, Sexo = "Macho" },
        new Pet { Nome = "Mia", NumeroChip = "654321", IdadeAproximada = 3, Tipo = "Gato", Castrado = false, Vacinado = true, Sexo = "Fêmea" },
        // Adicione mais pets conforme necessário
    };

    private void ConsultarPet()
    {
        // Limpa a mensagem de erro anterior
        mensagemErro = null;

        // Busca o pet pelo número do chip
        petEncontrado = petsCadastrados.Find(p => p.NumeroChip == numeroChip);

        if (petEncontrado == null)
        {
            mensagemErro = "Pet não encontrado com o número do chip fornecido.";
        }
    }
}  *@
@page "/Consultar"
@using SaneamentoPet.Client.Services
@using SaneamentoPet.Models
@inject PetService PetService

<PageTitle>Consulta de Pets</PageTitle>

<h3>Consulta de Pets Cadastrados</h3>

<div class="mb-3">
    <label for="numeroChip">Número do Chip:</label>
    <InputText id="numeroChip" class="form-control" @bind-Value="@numeroChip" />
</div>

<button class="btn btn-primary" @onclick="ConsultarPet">Consultar</button>

@if (petEncontrado != null)
{
    <div class="mt-3">
        <h4>Dados do Pet:</h4>
        <p><strong>Nome:</strong> @petEncontrado.nome</p>
        <p><strong>Número do Chip:</strong> @petEncontrado.chip_id</p>
        <p><strong>Idade Aproximada:</strong> @petEncontrado.idade_aproximada anos</p>
        <p><strong>Tipo:</strong> @petEncontrado.tipo_pet</p>
        <p><strong>Castrado:</strong> @(petEncontrado.castrado ? "Sim" : "Não")</p>
        <p><strong>Vacinado:</strong> @(petEncontrado.vacinado ? "Sim" : "Não")</p>
        <p><strong>Sexo:</strong> @petEncontrado.sexo</p>
        <p><strong>Observação:</strong> @petEncontrado.caixa_texto</p>
    </div>
}

@if (!string.IsNullOrEmpty(mensagemErro))
{
    <div class="alert alert-danger mt-3">
        @mensagemErro
    </div>
}

@code {
    private string numeroChip;
    private Pet? petEncontrado;
    private string mensagemErro;

    private async Task ConsultarPet()
    {
        try
        {
            mensagemErro = null;

            petEncontrado = await PetService.GetPetAsync(int.Parse(numeroChip));

            if (petEncontrado == null)
            {
                mensagemErro = "Pet não encontrado com o número do chip fornecido.";
            }
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro ao consultar o pet: {ex.Message}";
        }
    }
}
